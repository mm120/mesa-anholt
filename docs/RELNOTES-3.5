
                         Mesa 3.5 release notes

                             Month ??, 2000

                             PLEASE READ!!!!



Introduction
------------

Mesa uses an even/odd version number scheme like the Linux kernel.
Odd numbered versions (such as 3.3) designate new developmental releases.
Even numbered versions (such as 3.4) designate stable releases.

The internal structure of Mesa 3.5 is (will be) changed so that it
is more modular.  The motivation is better support of 3D hardware
such as T&L hardware in which much of core Mesa isn't needed.

Details to come...



New Extensions
--------------

GL_EXT_convolution
	Adds image convolution to glRead/Copy/DrawPixels/TexImage.

GL_ARB_imaging
	This is the optional imaging subset of OpenGL 1.2.
	It's the GL_EXT_convolution, GL_HP_convolution_border_modes,
	GL_EXT_histogram, GL_EXT_color_table, GL_EXT_color_subtable
	GL_EXT_blend_color, GL_EXT_blend_minmax, GL_EXT_blend_subtract
	and GL_SGI_color_matrix extensions all rolled together.
	This is supported in all software renderers but not in all
	hardware drivers (3dfx for example).

GL_ARB_texture_compression
	This is supported in Mesa but only used by the 3dfx DRI drivers
	for Voodoo4 and later.

GL_ARB_texture_env_add
	This is identical to GL_EXT_texture_env_add.

GL_NV_blend_square
	Adds extra blend source and dest factors which allow squaring
	of color values.



Device Driver Changes / Core Mesa Changes
-----------------------------------------

The ctx->Driver.LogicOp() function has been removed.  It used to
be called during state update in order to determine if the driver
could do glLogicOp() operations, and if not, set the SWLogicOpEnabled
flag.  Drivers should instead examine the LogicOp state themselves
and choose specialized point, line, and triangle functions appropriately,
or fall back to software rendering.  The Xlib driver was the only driver
to use this function.  And since the Xlib driver no longer draws
points, lines or triangles using Xlib, the LogicOp function isn't needed.

The ctx->Driver.Dither() function has been removed.  Drivers should
detect dither enable/disable via ctx->Driver.Enable() instead.

The ctx->Driver.IndexMask() and ctx->Driver.ColorMask() functions
are now just called from glIndexMask and glColorMask like the other
GL state-changing functions.  They are no longer called from inside
gl_update_state().  Also, they now return void.  The change was made
mostly for sake of uniformity.

The NEW_DRVSTATE[0123] flags have been removed.  They weren't being used
and are obsolete w.r.t. the way state updates are done in DRI drivers.


----------------------------------------------------------------------
$Id: RELNOTES-3.5,v 1.5 2000/09/25 16:04:35 brianp Exp $
